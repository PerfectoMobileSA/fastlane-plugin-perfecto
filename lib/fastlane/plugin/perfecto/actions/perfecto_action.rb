require 'fastlane/action'
require_relative '../helper/perfecto_helper'
require 'json'

module Fastlane
  module Actions
    module SharedValues
      PERFECTO_MEDIA_FULLPATH ||= :PERFECTO_MEDIA_FULLPATH
    end
    class PerfectoAction < Action
      SUPPORTED_FILE_EXTENSIONS = ["ipa", "apk"]

      def self.run(params)
        # Mandatory parameters
        perfecto_cloudurl = params[:perfecto_cloudurl]
        perfecto_token = params[:perfecto_token]
        filepath = params[:file_path].to_s
        perfecto_media_location = params[:perfecto_media_location]
        perfecto_media_filename = params[:perfecto_media_filename]

        # validates the filepath and perfecto media location file
        UI.message("validating filepath")
        validate_filepath(filepath)
        UI.message("validating  media location")
        perfecto_media_fullpath = perfecto_media_location + "/" + perfecto_media_filename
        validate_repopath(perfecto_media_fullpath)

        # uploads the ipa/apk to perfecto media repository
        UI.message("Attempting to upload: " + filepath + " to Perfecto!")
        Helper::PerfectoHelper.upload_file(perfecto_cloudurl, perfecto_token, filepath, perfecto_media_fullpath)
        UI.success("The File in: " + filepath + " is successfully uploaded to Perfecto media location : " + perfecto_media_fullpath)

        # Setting the environment variable: PERFECTO_MEDIA_FULLPATH with the perfecto media repository location.
        ENV['PERFECTO_MEDIA_FULLPATH'] = nil
        ENV['PERFECTO_MEDIA_FULLPATH'] = perfecto_media_fullpath
        UI.success("Setting Environment variable PERFECTO_MEDIA_FULLPATH = " + ENV['PERFECTO_MEDIA_FULLPATH'])

        # Setting the media fullpath in shared values post successful upload in order to be used by other fastlane actions.
        Actions.lane_context[SharedValues::PERFECTO_MEDIA_FULLPATH] = perfecto_media_fullpath
      end

      def self.description
        "This plugin allows you to automatically upload ipa/apk files to Perfecto for manual/automation testing"
      end

      def self.authors
        ["genesisthomas"]
      end

      def self.return_value
        # If your method provides a return value, you can describe here what it does
      end

      def self.details
        # Optional:
        "A fastlane plugin which aids in automated deployment of ipa/apk files to Perfecto iOS/Android devices"
      end

      # Validate filepath.
      def self.validate_filepath(filepath)
        UI.user_error!("No file found at filepath parameter location.") unless File.exist?(filepath)

        # Validate file extension.
        filepath_parts = filepath.split(".")
        unless filepath_parts.length > 1 && SUPPORTED_FILE_EXTENSIONS.include?(filepath_parts.last)
          UI.user_error!("filepath is invalid, only files with extensions with .ipa or .apk are allowed to be uploaded.")
        end
      end

      # Validate media repo path.
      def self.validate_repopath(perfecto_media_fullpath)
        # Validate file extension.
        filepath_parts = perfecto_media_fullpath.split(".")
        unless filepath_parts.length > 1 && SUPPORTED_FILE_EXTENSIONS.include?(filepath_parts.last)
          UI.user_error!("perfecto_media_filename is invalid, only files with extensions with .ipa or .apk are allowed to be uploaded.")
        end
      end

      def self.output
        [
          ['perfecto_media_fullpath', 'Perfecto media repo location']
        ]
      end

      def self.default_file_path
        platform = Actions.lane_context[Actions::SharedValues::PLATFORM_NAME]
        if platform == :ios
          # Shared value for ipa path if it was generated by gym https://docs.fastlane.tools/actions/gym/.
          return Actions.lane_context[Actions::SharedValues::IPA_OUTPUT_PATH]
        else
          # Shared value for apk if it was generated by gradle.
          return Actions.lane_context[Actions::SharedValues::GRADLE_APK_OUTPUT_PATH]
        end
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(key: :perfecto_cloudurl,
                                       description: "Perfecto's cloud url",
                                       optional: false,
                                       is_string: true,
                                       verify_block: proc do |value|
                                         UI.user_error!("No perfecto_cloudurl given.") if value.to_s.empty?
                                       end),
          FastlaneCore::ConfigItem.new(key: :perfecto_token,
                                       description: "Perfecto's security token",
                                       optional: false,
                                       is_string: true,
                                       verify_block: proc do |value|
                                         UI.user_error!("No perfecto_token given.") if value.to_s.empty?
                                       end),
          FastlaneCore::ConfigItem.new(key: :perfecto_media_location,
                                        description: "Path to Perfecto media location",
                                        optional: false,
                                        is_string: true,
                                        verify_block: proc do |value|
                                          UI.user_error!("No perfecto_media_location given.") if value.to_s.empty?
                                        end),
          FastlaneCore::ConfigItem.new(key: :perfecto_media_filename,
                                        description: "Perfecto media filename",
                                        optional: false,
                                        is_string: true,
                                        verify_block: proc do |value|
                                          UI.user_error!("No perfecto_media_filename given.") if value.to_s.empty?
                                        end),
          FastlaneCore::ConfigItem.new(key: :file_path,
                                       description: "Path to the app file",
                                       optional: true,
                                       is_string: true,
                                       default_value: default_file_path)
        ]
      end

      def self.is_supported?(platform)
        [:ios, :android].include?(platform)
      end

      def self.example_code
        [
          'perfecto',
          'perfecto(
            perfecto_cloudurl: ENV["PERFECTO_CLOUDURL"],
            perfecto_token: ENV["PERFECTO_TOKEN"],
            perfecto_media_location: ENV["PERFECTO_MEDIA_LOCATION"],
            perfecto_media_filename: ENV["PERFECTO_MEDIA_FILENAME"],
            file_path: "path_to_apk_or_ipa_file"
           )'
        ]
      end
    end
  end
end
